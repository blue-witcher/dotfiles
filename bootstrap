#!/bin/bash

#########################################

# Functions


source scripts/functions.sh
source packages

######################################### 

# Information gathering


## Execute the function to detect and print the distribution
detect_distro
## Execute the function to detect and print the current user
get_current_user

## Ask user if they want to install the locale.conf file
if ask_user "Do you want to install the locale.conf file?"; then
    LOCALECONF=true
fi

## KDE
### Ask user if they want to install ALL kde configs
if ask_user "Do you want to install all KDE configs?"; then
        KDE_KLIPPER=true
        KDE_KONSOLE=true
        KDE_SESSION=true
        KDE_PANEL=true
        PROFILE_PIC=true
    # If no, ask them for each file seperately
    elif ask_user "Do you want to install any KDE configs?"; then
        # Klipper
        if ask_user "Dou you want to install the kde klipper config? (No history)"; then
            KDE_KLIPPER=true
        fi
        # Konsole
        if ask_user "Do you want to install the konsole config, color-scheme and profile?"; then
            KDE_KONSOLE=true
        fi
        # KDE Session
        if ask_user "Do you want to install the KDE Session config? (Empty session on start & no logout confirm)"; then
            KDE_SESSION=true
        fi
        # KDE panel
        ### Ask user if they want to install the KDE panel config
        if ask_user "Do you want to install the KDE panel config?"; then
            KDE_PANEL=true
        fi
        # KDE profile pic
        if ask_user "Do you want to install your profile picture?"; then
            PROFILE_PIC=true
        fi
fi 

### Ask user if they want to delete ~/.config/plasma-localerc
if ask_user $'Do you want to delete the "~/.config/plasma-localerc" file?\nYou may need to do this so plasma uses the locale of your system, as defined in /etc/locale.conf'; then
    DELETE_PLASMA_LOCALERC=true
fi 
##KDE end

## Group management
### Ask if user wants to be in wheel group (Necessary for sudo configuration)
if ask_user "Add user \"$CURRENT_USER\" to group \"wheel\"? You need to do this for the sudoers config to work."; then
    # If user answers yes, add user to wheel group later
    USER_WHEEL=true
fi

## Sudo
### Ask if user wants to install the sudoers file
if ask_user "Do you want to install the sudoers file?"; then
    SUDOERS=true
fi

## Installations
### Section for openSUSE
if [ "$DISTRO" = "openSUSE Leap" ] || [ "$DISTRO" = "openSUSE Tumbleweed" ]; then
    echo "This is openSUSE. Performing openSUSE-specific tasks..."
    # Add openSUSE-specific commands here
#### zypp.conf
    if ask_user "Do you want to install zypp.conf?"; then
        ZYPP_CONF=true
    fi
#### opensuse packages
    if ask_user "Do you want to install packages?"; then
        # Store yes so the installations can all the done in the end
        SUSE_INSTALL=true
        if ask_user 'Do you want to add the noreply github email address to your gitconfig?'; then
            # If user answers yes, add the email to gitconfig
            GIT_CONFIG=true
        fi
        if ask_user "Do you want to install the fish config and fish aliases?"; then
            FISH_CONFIG=true
            FISH_SUSE=true
        fi
        if ask_user "Do you want to install rclone config?"; then
            RCLONE_CONF=true
            if ask_user "Do you want to install the driveSync crontab?"; then
                CRON_SETUP=true
                DRIVESYNC_CRON=true
            fi
        fi
    fi
#### Packman codecs
    # Ask if the user wants to install packman repo and codecs
    if ask_user "Do you want to enable the packman repo and install codecs?"; then
        # If user answers yes, install packman and codecs
        SUSE_CODECS=true
    fi

#### vscode
    # Ask if the user wants to install vscode from the obs
    if ask_user "Do you want to install vscode from the obs?"; then
            # Yes
            VSCODE_OBS=true
    fi
fi

### Steam
if ask_user "Do you want to install steam?"; then
    STEAM=true
fi

## flatpaks
### Ask the user if he wants to install obsidian
if ask_user "Do you want to install ObsidianMD as flatpak?"; then
    # Yes
    OBSIDIAN=true
fi

### Ask the user if he wants to install vesktop
if ask_user "Do you want to install Vesktop? (Alternate discord client)"; then
    # Yes
    VESKTOP=true
fi

#########################################

# Summary


## Installations
echo "=== Installations ==="
if [ "$ZYPP_CONF" = true ]; then
    echo "Will install 'zypp.conf'."
fi
if [ "$SUSE_INSTALL" = true ]; then
    echo "Will install the following openSuse packages."
    echo $openSuse_Packages
fi
if [ "$FISH_CONFIG" = true ]; then
    echo "Will install fish config."
fi
if [ "$FISH_SUSE" = true ]; then
    echo "Will install fish openSuse-aliases."
fi
if [ "$RCLONE_CONF" = true ]; then
    echo "Will install rclone configuration."
fi
if [ "$DRIVESYNC_CRON" = true ]; then
    echo "Will install driveSync cron-job."
fi
if [ "$GIT_CONFIG" = true ]; then
    echo "Will install gitconfig."
fi
if [ "$SUSE_CODECS" = true ]; then
    echo "Will install packman codecs."
fi
if [ "$VSCODE_OBS" = true ]; then
    echo "WIll install vscode."
fi
if [ "$STEAM" = true ]; then
    echo "Will install Steam."
fi
if [ "$OBSIDIAN" = true ]; then
    echo "Will install Obsidian."
fi
if [ "$VESKTOP" = true ]; then
    echo "Will install Vesktop."
fi
## Configurations
echo "=== Configurations ==="
if [ "$KDE_KLIPPER" = true ]; then
    echo "Will install klipper config."
fi
if [ "$KDE_KONSOLE" = true ]; then
    echo "Will install konsole config, color-schemes and profiles."
fi
if [ "$KDE_SESSION" = true ]; then
    echo "Will install KDE Session configuration."
fi
if [ "$KDE_PANEL" = true ]; then
    echo "Will install the KDE panel configuration."
fi
if [ "$PROFILE_PIC" = true ]; then
    echo "Will install user profile picture."
fi
if [ "$LOCALECONF" = true ]; then
    echo "Will install locale."
fi
if [ "$DELETE_PLASMA_LOCALERC" = true ]; then
    echo "Will delete plasma locale."
fi
if [ "$USER_WHEEL" = true ]; then
    echo "Will add user "$CURRENT_USER" to \"wheel\" group."
fi
if [ "$SUDOERS" = true ]; then
    echo "Will install sudoers file."
fi
if ask_user "Are these settings okay?"; then
        :
    else
        # Exec terminates current program and starts a new one.
        exec bootstrap
fi


######################################### 

# Installations


## Install zypp.conf
if [ "$ZYPP_CONF" = true ]; then
    echo "Installing 'zypp.conf'.."
    sudo mv /etc/zypp/zypp.conf /etc/zypp/zypp.conf.BACKUP
    echo "Backup of old zypp.conf at /etc/zypp/zypp.conf.BACKUP."
    sudo cp zypp.conf /etc/zypp/zypp.conf
    echo "Installed 'zypp.conf'."
fi
## packages
### openSuse packages
if [ "$SUSE_INSTALL" = true ]; then
    echo "Installing openSuse packages.."
    sudo zypper install $openSuse_Packages
    echo "Installed openSuse packages."

    if [ "$GIT_CONFIG" = true ]; then
        git config --global user.email '171081467+blue-witcher@users.noreply.github.com'
        echo 'Added 171081467+blue-witcher@users.noreply.github.com to gitconfig'
    fi
fi

#### openSuse packman codecs
if [ "$SUSE_CODECS" = true ]; then
    echo "Installing packman and codecs.."
    sudo opi codecs
    echo "Installed packman and codecs."
    echo "You may need to run \"zypper dup --from packman --allow-vendor-change\""
fi

#### OBS vscode
if [ "$VSCODE_OBS" = true ]; then
    echo "Installing vscode.."
    if [ "$DISTRO" = "openSUSE Tumbleweed" ]; then
            echo "Installing vscode for openSuse Tumbleweed.."
            sudo zypper addrepo https://download.opensuse.org/repositories/devel:tools:ide:vscode/openSUSE_Tumbleweed/devel:tools:ide:vscode.repo
            sudo zypper refresh
            sudo zypper install code
        elif [ "$DISTRO" = "openSUSE Leap" ]; then
            echo "Installing vscode for openSuse Leap $DISTRO_VERSION.."
            zypper addrepo "https://download.opensuse.org/repositories/devel:tools:ide:vscode/$DISTRO_VERSION/devel:tools:ide:vscode.repo"
            zypper refresh
            zypper install code
    fi
    echo "Installed vscode."
fi

### Steam
if [ "$STEAM" = true ]; then
    if [ "$DISTRO" = "openSUSE Leap" ] || [ "$DISTRO" = "openSUSE Tumbleweed" ]; then
            echo "Installing steam for openSuse.."
            sudo zypper install steam
            echo "Installed steam for openSuse."
        else
            :
    fi
fi

### Obsidian
if [ "$OBSIDIAN" = true ]; then
    echo "Installing Obsidian.."
    flatpak install flathub md.obsidian.Obsidian
    echo "Installed Obsidian."
fi

### Vesktop
if [ "$VESKTOP" = true ]; then
    echo "Installing Vesktop.."
    flatpak install flathub dev.vencord.Vesktop
    echo "Installed vesktop."
    echo "Remember to import your settings."
fi
## packages end

# configs
## fish config
if [ "$FISH_CONFIG" = true ]; then
    echo "Installing fish configs.."
    mkdir -p ~/.config/fish/functions
    cp fish/config.fish ~/.config/fish 
    echo "Installed fish config."
    # Install distro-independent functions V
    cp fish/functions/* ~/.config/fish/functions
    echo "Installed fish functions"
    # If on openSuse, install the openSuse-specific functions
    if [ "$FISH_SUSE" = true ]; then
        echo "Installing openSuse functions.."
        cp fish/functions/openSuse/* ~/.config/fish/functions
        echo "Installed openSuse functions."
    fi
fi

## rclone / driveSync
DRIVESYNC_FOLDER=~/Documents/scripts/driveSync
if [ "$RCLONE_CONF" = true ]; then
    # Rclone config
    echo "Installing rclone configuration.."
    mkdir -p ~/.config/rclone
    cp rclone/rclone.conf ~/.config/rclone
    echo "Installed rclone conf."
    echo "Don't forget to add your remote token using 'rclone config' command."
    # driveBiSync install
    echo "Installing driveBiSync.."
    mkdir -p $DRIVESYNC_FOLDER/logs
    cp rclone/driveBiSync.sh $DRIVESYNC_FOLDER
    echo "Installed driveBiSync in '$DRIVESYNC_FOLDER'."
fi

## cron jobs
if [ "$CRON_SETUP" = true ]; then
    echo "Starting cron setup.."
    . scripts/crontab.sh
    echo "Cron setup done."
fi

## KDE
### Install klipper config
if [ "$KDE_KLIPPER" = true ]; then
    echo "Installing klipper config.."
    cp KDE/klipperrc ~/.config 
    echo "Installed klipper config."
fi

### Install konsole config
if [ "$KDE_KONSOLE" = true ]; then
    echo "Installing konsole config, color-schemes and profiles.."
    cp KDE/konsolerc ~/.config
    Echo "Installed konsole config."
    mkdir -p ~/.local/share/konsole
    cp KDE/.local/share/konsole/* ~/.local/share/konsole
    echo "Installed konsole profiles and colorschemes."
fi

### Install session config
if [ "$KDE_SESSION" = true ]; then
    echo "Installing KDE session settings.."
    cp KDE/ksmserverrc ~/.config
    echo "Installed KDE session settings."
fi

### Install kde panel config
if [ "$KDE_PANEL" = true ]; then
    echo "Installing KDE panel settings.."
    cp KDE/plasma-org.kde.plasma.desktop-appletsrc ~/.config
    echo "Installed KDE panel settings."
fi

### Install kde profile picture
if [ "$PROFILE_PIC" = true ]; then
    echo "Installing profile picture.."
    cp blue /var/lib/AccountsService/icons/blue
    echo "Installed profile picture."
fi

## KDE end    

## locale.conf
## Install new locale.conf file
if [ "$LOCALECONF" = true ]; then
    echo "Installing locale.conf.."
    # -i for cp to ask for confirmation
    sudo cp -i locale.conf /etc/locale.conf
    echo "Installed locale.conf."
fi

## plasma_localerc
## Delete the plasma specific locale file so plasma uses the locales from /etc/locale.conf
if [ "$DELETE_PLASMA_LOCALERC" = true ]; then
    echo "Deleting plasma-localerc.."
    rm ~/.config/plasma-localerc
    echo "Deleted plasma-localerc"
fi

## user management
### Add user to wheel group
if [ "$USER_WHEEL" = true ]; then
    sudo usermod -a -G wheel $CURRENT_USER
    echo "Added user \"$CURRENT_USER\" to group \"wheel\"."
fi

## Sudo
## Install sudoers file
## This should be the last thing to be done before restarting.
if [ "$SUDOERS" = true ]; then
    echo "Installing sudoers file.."
    sudo cp sudoers /etc/sudoers
    # Permissions management
    chmod ug=r,o= /etc/sudoers
    sudo chown root:root /etc/sudoers
    # Maybe need to also manage file ownership after copy, like:
    # sudo chown root (idk syntax)
    # sudo chmod only root (idk syntax)
fi

############################

# End of script


## Reboot
## Ask if the user wants to restart and remind him that he needs to restart for the sudo configuration to work
if ask_user "Do you want to reboot now? (You need to reboot to apply the locale and sudoers configurations)"; then
        # Yes
        echo "Rebooting.."
        systemctl reboot
    else
        # No
        echo "Script done."
fi