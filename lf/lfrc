set ignorecase true
set icons true
set info size
set ifs "\n"

# show warning when in nested instance
&[ "$LF_LEVEL" -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

# kitty + pistol
# set previewer ~/.config/lf/previewer
# set cleaner ~/.config/lf/cleaner

# ctpv
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# bat pager
cmd batpage ${{
	bat --color always --paging=always $fx
}}

# create directory
cmd mkdir %{{
	printf "Directory name: "
	read ans
	mkdir "$ans"
}}

# zoxide ask
cmd zo %{{
	printf "Zoxide: "
	read ans
	result="$(zoxide query --exclude "$PWD" "$ans" | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
    lf -remote "send $id tty-write \"\033]0;lf $(pwd | sed "s|^$HOME|~|")\007\""
}}

# better cut controls
cmd cut-add %{{
    sed -i '1s/.*/move/' ~/.local/share/lf/files
    printf '%s\n' "$fx" >> ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

cmd cut-remove %{{
    sed -i '1s/.*/move/' ~/.local/share/lf/files
    printf '%s\n' "$fx" | while IFS= read -r file; do
        sed -i "\|$file|d" ~/.local/share/lf/files
    done
    lf -remote "send $id :unselect; sync"
}}

cmd cut-toggle %{{
    files="$(comm --output-delimiter= -3 \
        <(tail -n+2 ~/.local/share/lf/files | sort) \
        <(printf '%s\n' "$fx" | sort) | tr -d '\0')"
    printf 'move\n%s\n' "$files" > ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

# better copy controls
cmd copy-add %{{
    sed -i '1s/.*/copy/' ~/.local/share/lf/files
    printf '%s\n' "$fx" >> ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

cmd copy-remove %{{
    sed -i '1s/.*/copy/' ~/.local/share/lf/files
    printf '%s\n' "$fx" | while IFS= read -r file; do
        sed -i "\|$file|d" ~/.local/share/lf/files
    done
    lf -remote "send $id :unselect; sync"
}}

cmd copy-toggle %{{
    files="$(comm --output-delimiter= -3 \
        <(tail -n+2 ~/.local/share/lf/files | sort) \
        <(printf '%s\n' "$fx" | sort) | tr -d '\0')"
    printf 'copy\n%s\n' "$files" > ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

# kitten icat (as)
cmd icat !{{
	kitten icat $fx
}}

# bulk rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a -- $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" > "$old"
    printf '%s\n' "$fs" > "$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}


# mappings

## navitagion
map n updir
map e down
map i up
map o open
map h high
map m middle
map l low
map <tab> half-up
map <c-e> half-down
map <c-n> top
map <c-o> bottom

## utilities
map I batpage
map E $$EDITOR "$f"
# map ac mkdir
map ac push %mkdir<space>
map az zo
map zz zo
map Z zo
map <enter> shell-pipe
map <c-space> shell
map f filter
map F find
map x cut
map d clear
map c copy
map X cut-toggle
map C copy-toggle
map t %trash-put $fx
map T delete
map R bulk-rename
map w $fish
map as icat
map Q %lf -remote "send $id :cd \"$OLDPWD\"; quit"
 # unbound keys
map y
map t
map k
map j 
map L
map M
map H
